/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as DepositContractJson } from "../Deposit.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace DepositTypes {
  export type Fields = {
    totalDeposits: bigint;
  };

  export type State = ContractState<Fields>;

  export type DepositMadeEvent = ContractEvent<{
    from: Address;
    amount: bigint;
  }>;

  export interface CallMethodTable {
    deposit: {
      params: CallContractParams<{ from: Address; amount: bigint }>;
      result: CallContractResult<null>;
    };
    getTotalDeposits: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    deposit: {
      params: SignExecuteContractMethodParams<{
        from: Address;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    getTotalDeposits: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<DepositInstance, DepositTypes.Fields> {
  encodeFields(fields: DepositTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { DepositMade: 0 };

  at(address: string): DepositInstance {
    return new DepositInstance(address);
  }

  tests = {
    deposit: async (
      params: TestContractParamsWithoutMaps<
        DepositTypes.Fields,
        { from: Address; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    getTotalDeposits: async (
      params: Omit<
        TestContractParamsWithoutMaps<DepositTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getTotalDeposits",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: DepositTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Deposit = new Factory(
  Contract.fromJson(
    DepositContractJson,
    "",
    "8c87926fb75f9bc456effdbff709ebe967b3fbef48038f514205c2821a4c841f",
    []
  )
);
registerContract(Deposit);

// Use this class to interact with the blockchain
export class DepositInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DepositTypes.State> {
    return fetchContractState(Deposit, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDepositMadeEvent(
    options: EventSubscribeOptions<DepositTypes.DepositMadeEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Deposit.contract,
      this,
      options,
      "DepositMade",
      fromCount
    );
  }

  view = {
    deposit: async (
      params: DepositTypes.CallMethodParams<"deposit">
    ): Promise<DepositTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        Deposit,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    getTotalDeposits: async (
      params?: DepositTypes.CallMethodParams<"getTotalDeposits">
    ): Promise<DepositTypes.CallMethodResult<"getTotalDeposits">> => {
      return callMethod(
        Deposit,
        this,
        "getTotalDeposits",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    deposit: async (
      params: DepositTypes.SignExecuteMethodParams<"deposit">
    ): Promise<DepositTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(Deposit, this, "deposit", params);
    },
    getTotalDeposits: async (
      params: DepositTypes.SignExecuteMethodParams<"getTotalDeposits">
    ): Promise<DepositTypes.SignExecuteMethodResult<"getTotalDeposits">> => {
      return signExecuteMethod(Deposit, this, "getTotalDeposits", params);
    },
  };

  async multicall<Calls extends DepositTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DepositTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends DepositTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<DepositTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends DepositTypes.MultiCallParams | DepositTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Deposit, this, callss, getContractByCodeHash);
  }
}
