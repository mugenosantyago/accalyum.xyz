/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PostManagerContractJson } from "../PostManager.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";

// Custom types for the contract
export namespace PostManagerTypes {
  export type Fields = {
    acyumTokenId: HexString;
    postFee: bigint;
    treasury: Address;
  };

  export type State = ContractState<Fields>;

  export type PostCreatedEvent = ContractEvent<{
    sender: Address;
    content: HexString;
    feePaid: bigint;
    timestamp: bigint;
  }>;

  export interface CallMethodTable {
    getPostFee: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getAcyumTokenId: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    createPost: {
      params: CallContractParams<{ content: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getPostFee: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getAcyumTokenId: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    createPost: {
      params: SignExecuteContractMethodParams<{ content: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PostManagerInstance,
  PostManagerTypes.Fields
> {
  encodeFields(fields: PostManagerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  eventIndex = { PostCreated: 0 };

  at(address: string): PostManagerInstance {
    return new PostManagerInstance(address);
  }

  tests = {
    getPostFee: async (
      params: Omit<
        TestContractParamsWithoutMaps<PostManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getPostFee", params, getContractByCodeHash);
    },
    getAcyumTokenId: async (
      params: Omit<
        TestContractParamsWithoutMaps<PostManagerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getAcyumTokenId", params, getContractByCodeHash);
    },
    createPost: async (
      params: TestContractParamsWithoutMaps<
        PostManagerTypes.Fields,
        { content: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "createPost", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PostManagerTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PostManager = new Factory(
  Contract.fromJson(
    PostManagerContractJson,
    "",
    "0b85dba89c90ec9c2c1a33eb20778ede577bd15a3644b202633d46af3e5216aa",
    []
  )
);
registerContract(PostManager);

// Use this class to interact with the blockchain
export class PostManagerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PostManagerTypes.State> {
    return fetchContractState(PostManager, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribePostCreatedEvent(
    options: EventSubscribeOptions<PostManagerTypes.PostCreatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PostManager.contract,
      this,
      options,
      "PostCreated",
      fromCount
    );
  }

  view = {
    getPostFee: async (
      params?: PostManagerTypes.CallMethodParams<"getPostFee">
    ): Promise<PostManagerTypes.CallMethodResult<"getPostFee">> => {
      return callMethod(
        PostManager,
        this,
        "getPostFee",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getAcyumTokenId: async (
      params?: PostManagerTypes.CallMethodParams<"getAcyumTokenId">
    ): Promise<PostManagerTypes.CallMethodResult<"getAcyumTokenId">> => {
      return callMethod(
        PostManager,
        this,
        "getAcyumTokenId",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    createPost: async (
      params: PostManagerTypes.CallMethodParams<"createPost">
    ): Promise<PostManagerTypes.CallMethodResult<"createPost">> => {
      return callMethod(
        PostManager,
        this,
        "createPost",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getPostFee: async (
      params: PostManagerTypes.SignExecuteMethodParams<"getPostFee">
    ): Promise<PostManagerTypes.SignExecuteMethodResult<"getPostFee">> => {
      return signExecuteMethod(PostManager, this, "getPostFee", params);
    },
    getAcyumTokenId: async (
      params: PostManagerTypes.SignExecuteMethodParams<"getAcyumTokenId">
    ): Promise<PostManagerTypes.SignExecuteMethodResult<"getAcyumTokenId">> => {
      return signExecuteMethod(PostManager, this, "getAcyumTokenId", params);
    },
    createPost: async (
      params: PostManagerTypes.SignExecuteMethodParams<"createPost">
    ): Promise<PostManagerTypes.SignExecuteMethodResult<"createPost">> => {
      return signExecuteMethod(PostManager, this, "createPost", params);
    },
  };

  async multicall<Calls extends PostManagerTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PostManagerTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends PostManagerTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PostManagerTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends
      | PostManagerTypes.MultiCallParams
      | PostManagerTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(
      PostManager,
      this,
      callss,
      getContractByCodeHash
    );
  }
}
